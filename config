#!/bin/bash
## Basic configuration on Ubuntu 18.04, DigitalOcean generic server

if [[ "$( dirname $0 )" != '.' ]]
then
    echo "Execute $0 script on project root directory:
         ./config"
    exit 1
fi

if [ "$1" == 'help' ]
then
    echo "Instructions:
    $0            configure and install dependencies
    $0 help       shows this message
    $0 install    moves system configurations files to /etc/, it requires root privileges
    $0 clean      deletes temporal files on project root directory
    $0 uninstall  does stop, disable services and delete the configuration files
                  placed on system by installation routine
"
    exit 0
fi

## Get configuration constants from file
eval "$( sed 's|[\t=]| |;s| * |="|;s|^.|declare &|;s|.$|&"|' ./server.cfg )"
_ws_static=$( sed 's|^//*||;s|/*/$||' <<< "$_ws_static" )

# Risky configuration, it requires root privileges and places files on system
if [[ "$1" == 'install' ]]
then
    set -e
    echo "It stops NGINX"
    systemctl stop nginx

    echo "Copy System-D files and NGINX files"
    cp gunicorn${_ws_dir}.service /etc/systemd/system/gunicorn${_ws_dir}.service
    cp web-${_ws_dir}.nginx-config /etc/nginx/sites-available/web-${_ws_dir}

    # Test configuration
    echo "Test configuration and enable the site, enable image filter module"

    # Next module already on server by default
    #echo 'load_module modules/ngx_http_image_filter_module.so' > /etc/nginx/modules-enabled/${_ws_dir}.conf

    nginx -t
    ln -s /etc/nginx/sites-available/web-${_ws_dir} /etc/nginx/sites-enabled

    # Enable the service
    echo "Enable the service and start both services, Gunicorn and NGINX"
    systemctl enable gunicorn${_ws_dir}.service
    systemctl start gunicorn${_ws_dir}.service

    systemctl start nginx
    exit 0
fi

if [[ "$1" == 'uninstall' ]]
then
    set -e
    systemctl stop nginx
    systemctl stop gunicorn${_ws_dir}.service
    systemctl disable gunicorn${_ws_dir}.service

    echo "rm /etc/nginx/sites-enabled/web-${_ws_dir}"
    rm /etc/nginx/sites-enabled/web-${_ws_dir}

    echo "rm /etc/nginx/sites-available/web-${_ws_dir}"
    rm /etc/nginx/sites-available/web-${_ws_dir}

    echo "rm /etc/systemd/system/gunicorn${_ws_dir}.service"
    rm /etc/systemd/system/gunicorn${_ws_dir}.service

    systemctl start nginx
    exit 0
fi

if [[ "$1" == 'clean' ]]
then
    set -e
    rm ./gunicorn${_ws_dir}.service
    rm ./web-${_ws_dir}.nginx-config
    exit 0
fi

# Riskless configuration, it doesn't ingress files on system, local files placing
if [ "$VIRTUAL_ENV" ] && [ $USER != 'root' ]
then
    # Inner configuration for Python3 virtual enviroment
    ./bash/dependencias.sh # Install Django and its complements

    echo "[Unit]
Description=Gunicorn daemon server:$PWD $_ws_descp
After=network.target

[Service]
User=$USER
Group=www-data
WorkingDirectory=$PWD
ExecStart=$VIRTUAL_ENV/bin/gunicorn --access-logfile - --workers 3 --bind unix:$PWD/web-${_ws_dir}.sock ${_ws_dir}.wsgi:application

[Install]
WantedBy=multi-user.target
" > gunicorn${_ws_dir}.service

# NGINX config file, resize server and main server
cat > web-${_ws_dir}.nginx-config <<EOF
proxy_cache_path $PWD/imgcache levels=1 keys_zone=resized:1m max_size=256m;

server {
    listen $_ws_port;
    server_name $_ws_ip;
    error_page 404 /$_ws_static/404.html;
    location = /favicon.ico { access_log off; log_not_found off; }
    location ~ ${_ws_media_regex} {
    proxy_pass http://127.0.0.1:${_ws_media_port};
        proxy_cache       resized;
        proxy_cache_valid 180m;
    }
    location /$_ws_static/ {
        root $PWD;
    }
    location /$_ws_media/ {
        root $PWD;
    }
    location / {
        include proxy_params;
        proxy_pass http://unix:$PWD/web-${_ws_dir}.sock;
    }
}

limit_req_zone "1" zone=2persec:32k rate=2r/s;

# Image resize server
server {
    listen $_ws_media_port;
    allow 127.0.0.1;
    deny all;
    limit_req zone=2persec burst=10;

    location ~ ${_ws_media_regex} {
       alias $PWD/${_ws_media}/\$2;
       image_filter_buffer 10M;
       image_filter resize \$1 -;
    }
}
EOF

elif [ "$VIRTUAL_ENV" ] && [ $USER == 'root' ]
then
    echo "No ejecute este script con SUDO dentro del ambiente virtual"
    exit 1
elif [[ $USER == 'root' ]] && [ "0$VIRTUAL_ENV" == '0' ]
then
     # Instalar las dependencias del sistema:
     { python3 --version && pip3 --version && nginx -v ; } || {
         # Se actualiza el sistema
         apt update
         apt upgrade

         # Se instala Python3 en el sistema
         apt install -y python3 python3-pip

         # Instalar el web-service
         apt install -y nginx
         # apt install -y libnginx-mod-http-image-filter # Already on server by default

         systemctl stop nginx.service
     }

     # Instalación de virtualenv
     pip3 install virtualenv

else
    virtualenv --version || {
        echo "
        Ejecute el siguiente comando para instalar las dependencias:
                $ sudo ./config
"
    }
    if test -d venv_server
    then
        :
    else
        virtualenv venv_server
        echo "
        Utilice el siguiente comando para acceder al ambiente virtual
        agregar el mismo al final de la configuración ~/.bashrc para
        ejecutarlo siempre por defecto al ingresar al servidor.
             $ source $PWD/venv_server/bin/activate"
    fi
    source ./venv_server/bin/activate
    $0 # Ejecuta la configuración dentro del ambiente virtual
fi

exit 0
